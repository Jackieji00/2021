                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      |   .pos 0
0x000: 30f4a807000000000000 | main:  irmovq Stack, %rsp    # Set up stack pointer
                            | 
                            |   # Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 |   irmovq $63, %rdx    # src and dst have 63 elements
0x014: 30f62805000000000000 |   irmovq dest, %rsi  # dst array
0x01e: 30f72003000000000000 |   irmovq src, %rdi  # src array
0x028: 803b00000000000000   |   call ncopy     
0x031: 80b401000000000000   |   call check          # Call checker code
0x03a: 00                   |   halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | # Name: Jackie Ji
                            | # ID:5404753
                            | # Description:
                            | #    1. change addq to iaddq for constant adding to register is faster than register adding to register.
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of negative words (<0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |   # Loop header
0x03b: 6300                 |   xorq %rax,%rax    # count = 0;
0x03d: c0f2fdffffffffffffff |   iaddq $-3,%rdx    # len > 3?
0x047: 716301000000000000   |   jle RestCheck    # if so, goto Done:
0x050:                      | Loop:
0x050: 6200                 |   andq %rax,%rax     #set CC
0x052: 50a70000000000000000 |   mrmovq (%rdi), %r10  # src->val
0x05c: c0f70800000000000000 |   iaddq $8, %rdi    # src+1
0x066: 40a60000000000000000 |   rmmovq %r10, (%rsi)  # val->dst
0x070: 62aa                 |   andq %r10, %r10    # val >= 0?
0x072: 768500000000000000   |   jg Npos    # if so, goto Npos:
0x07b: c0f00100000000000000 |   iaddq $1, %rax    # count++
0x085:                      | Npos:
0x085: c0f60800000000000000 |   iaddq $8, %rsi    # dst+1
0x08f: 50a70000000000000000 |   mrmovq (%rdi), %r10 # src+1->val
0x099: c0f70800000000000000 |   iaddq $8, %rdi    # src+2
0x0a3: 40a60000000000000000 |   rmmovq %r10, (%rsi) # val->dst+1
0x0ad: 62aa                 |   andq %r10, %r10    # val > 0?
0x0af: 76c200000000000000   |   jg branch1    # if so, goto branch1:
0x0b8: c0f00100000000000000 |   iaddq $1, %rax    # count++
0x0c2:                      | branch1:
0x0c2: c0f60800000000000000 |   iaddq $8, %rsi    # dst+2
0x0cc: 50a70000000000000000 |   mrmovq (%rdi), %r10  # src+2->val
0x0d6: c0f70800000000000000 |   iaddq $8, %rdi    # src+3
0x0e0: 40a60000000000000000 |   rmmovq %r10, (%rsi)  # val->dst+2
0x0ea: 62aa                 |   andq %r10, %r10    # val >= 0?
0x0ec: 76ff00000000000000   |   jg branch2    # if so, goto branch2:
0x0f5: c0f00100000000000000 |   iaddq $1, %rax    # count++
0x0ff:                      | branch2:
0x0ff: c0f60800000000000000 |   iaddq $8, %rsi    # dst+3
0x109: 50a70000000000000000 |   mrmovq (%rdi), %r10 # src+3->val
0x113: c0f70800000000000000 |   iaddq $8, %rdi    # src+4
0x11d: 40a60000000000000000 |   rmmovq %r10, (%rsi) # val->dst+3
0x127: 62aa                 |   andq %r10, %r10    # val > 0?
0x129: 763c01000000000000   |   jg branch3    # if so, goto branch3:
0x132: c0f00100000000000000 |   iaddq $1, %rax    # count++
0x13c:                      | branch3:
0x13c: c0f60800000000000000 |   iaddq $8, %rsi    # dst+4
0x146: c0f2fcffffffffffffff |   iaddq $-4, %rdx    # len>4
0x150: 765000000000000000   |   jg Loop      # if so, goto Loop:
0x159:                      | Reset:
0x159: c0f20300000000000000 |   iaddq $3,%rdx    #set len back to original number
0x163:                      | RestCheck:
0x163: 71b301000000000000   |   jle Done
0x16c:                      | Rest:
0x16c: 50a70000000000000000 |   mrmovq (%rdi), %r10
0x176: c0f70800000000000000 |   iaddq $8, %rdi    # src++
0x180: 40a60000000000000000 |   rmmovq %r10, (%rsi)
0x18a: c0f60800000000000000 |   iaddq $8, %rsi    # dst++
0x194: c0f2ffffffffffffffff |   iaddq $-1,%rdx    #len--
0x19e: 62aa                 |   andq %r10, %r10    # val > 0?
0x1a0: 766301000000000000   |   jg RestCheck    # if so, goto Done:
0x1a9: c0f00100000000000000 |   iaddq $1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1b3:                      | Done:
0x1b3: 90                   |   ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1b4:                      | End:
                            | #/* $end ncopy-ys */
0x1b4:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 33.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x1b4:                      | check:
                            |   # Return value test
0x1b4: 30fa2100000000000000 |   irmovq $33,%r10
0x1be: 61a0                 |   subq %r10,%rax
0x1c0: 73dc01000000000000   |   je checkb
0x1c9: 30f0bbbb000000000000 |   irmovq $0xbbbb,%rax  # Failed test #1
0x1d3: 701a03000000000000   |   jmp cdone
0x1dc:                      | checkb:
                            |   # Code length check
0x1dc: 30f0b401000000000000 |   irmovq EndFun,%rax
0x1e6: 30f23b00000000000000 |   irmovq StartFun,%rdx
0x1f0: 6120                 |   subq %rdx,%rax
0x1f2: 30f2e803000000000000 |   irmovq $1000,%rdx
0x1fc: 6102                 |   subq %rax,%rdx
0x1fe: 751a02000000000000   |   jge checkm
0x207: 30f0cccc000000000000 |   irmovq $0xcccc,%rax  # Failed test #2
0x211: 701a03000000000000   |   jmp cdone
0x21a:                      | checkm:
0x21a: 30f22805000000000000 |   irmovq dest, %rdx # Pointer to next destination location
0x224: 30f32003000000000000 |   irmovq src,%rbx   # Pointer to next source location
0x22e: 30f73f00000000000000 |   irmovq $63,%rdi  # Count
0x238: 6277                 |   andq %rdi,%rdi
0x23a: 739802000000000000   |   je checkpre         # Skip check if count = 0
0x243:                      | mcloop:
0x243: 50020000000000000000 |   mrmovq (%rdx),%rax
0x24d: 50630000000000000000 |   mrmovq (%rbx),%rsi
0x257: 6160                 |   subq %rsi,%rax
0x259: 737502000000000000   |   je  mok
0x262: 30f0dddd000000000000 |   irmovq $0xdddd,%rax # Failed test #3
0x26c: 701a03000000000000   |   jmp cdone
0x275:                      | mok:
0x275: 30f00800000000000000 |   irmovq $8,%rax
0x27f: 6002                 |   addq %rax,%rdx    # dest ++
0x281: 6003                 |   addq %rax,%rbx    # src++
0x283: 30f00100000000000000 |   irmovq $1,%rax
0x28d: 6107                 |   subq %rax,%rdi    # cnt--
0x28f: 764302000000000000   |   jg mcloop
0x298:                      | checkpre:
                            |   # Check for corruption
0x298: 30f22005000000000000 |   irmovq Predest,%rdx
0x2a2: 50020000000000000000 |   mrmovq (%rdx), %rax  # Get word before destination
0x2ac: 30f2fadebc0000000000 |   irmovq $0xbcdefa, %rdx
0x2b6: 6120                 |   subq %rdx,%rax
0x2b8: 73d402000000000000   |   je checkpost
0x2c1: 30f0eeee000000000000 |   irmovq $0xeeee,%rax  # Failed test #4
0x2cb: 701a03000000000000   |   jmp cdone
0x2d4:                      | checkpost:
                            |   # Check for corruption
0x2d4: 30f22007000000000000 |   irmovq Postdest,%rdx
0x2de: 50020000000000000000 |   mrmovq (%rdx), %rax  # Get word after destination
0x2e8: 30f2bcfade0000000000 |   irmovq $0xdefabc, %rdx
0x2f2: 6120                 |   subq %rdx,%rax
0x2f4: 731003000000000000   |   je checkok
0x2fd: 30f0eeee000000000000 |   irmovq $0xeeee,%rax # Failed test #4
0x307: 701a03000000000000   |   jmp cdone
0x310:                      | checkok:
                            |   # Successful checks
0x310: 30f0aaaa000000000000 |   irmovq $0xaaaa,%rax
0x31a:                      | cdone:
0x31a: 90                   |   ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x320:                      |   .align 8
0x320:                      | src:
0x320: 0100000000000000     | 	.quad 1
0x328: 0200000000000000     | 	.quad 2
0x330: fdffffffffffffff     | 	.quad -3
0x338: fcffffffffffffff     | 	.quad -4
0x340: fbffffffffffffff     | 	.quad -5
0x348: faffffffffffffff     | 	.quad -6
0x350: 0700000000000000     | 	.quad 7
0x358: 0800000000000000     | 	.quad 8
0x360: 0900000000000000     | 	.quad 9
0x368: 0a00000000000000     | 	.quad 10
0x370: 0b00000000000000     | 	.quad 11
0x378: 0c00000000000000     | 	.quad 12
0x380: f3ffffffffffffff     | 	.quad -13
0x388: f2ffffffffffffff     | 	.quad -14
0x390: f1ffffffffffffff     | 	.quad -15
0x398: 1000000000000000     | 	.quad 16
0x3a0: efffffffffffffff     | 	.quad -17
0x3a8: 1200000000000000     | 	.quad 18
0x3b0: edffffffffffffff     | 	.quad -19
0x3b8: ecffffffffffffff     | 	.quad -20
0x3c0: ebffffffffffffff     | 	.quad -21
0x3c8: eaffffffffffffff     | 	.quad -22
0x3d0: e9ffffffffffffff     | 	.quad -23
0x3d8: e8ffffffffffffff     | 	.quad -24
0x3e0: 1900000000000000     | 	.quad 25
0x3e8: e6ffffffffffffff     | 	.quad -26
0x3f0: 1b00000000000000     | 	.quad 27
0x3f8: e4ffffffffffffff     | 	.quad -28
0x400: e3ffffffffffffff     | 	.quad -29
0x408: 1e00000000000000     | 	.quad 30
0x410: 1f00000000000000     | 	.quad 31
0x418: e0ffffffffffffff     | 	.quad -32
0x420: dfffffffffffffff     | 	.quad -33
0x428: 2200000000000000     | 	.quad 34
0x430: 2300000000000000     | 	.quad 35
0x438: 2400000000000000     | 	.quad 36
0x440: 2500000000000000     | 	.quad 37
0x448: daffffffffffffff     | 	.quad -38
0x450: d9ffffffffffffff     | 	.quad -39
0x458: d8ffffffffffffff     | 	.quad -40
0x460: 2900000000000000     | 	.quad 41
0x468: d6ffffffffffffff     | 	.quad -42
0x470: d5ffffffffffffff     | 	.quad -43
0x478: 2c00000000000000     | 	.quad 44
0x480: 2d00000000000000     | 	.quad 45
0x488: 2e00000000000000     | 	.quad 46
0x490: 2f00000000000000     | 	.quad 47
0x498: d0ffffffffffffff     | 	.quad -48
0x4a0: cfffffffffffffff     | 	.quad -49
0x4a8: ceffffffffffffff     | 	.quad -50
0x4b0: 3300000000000000     | 	.quad 51
0x4b8: ccffffffffffffff     | 	.quad -52
0x4c0: cbffffffffffffff     | 	.quad -53
0x4c8: caffffffffffffff     | 	.quad -54
0x4d0: 3700000000000000     | 	.quad 55
0x4d8: c8ffffffffffffff     | 	.quad -56
0x4e0: c7ffffffffffffff     | 	.quad -57
0x4e8: c6ffffffffffffff     | 	.quad -58
0x4f0: 3b00000000000000     | 	.quad 59
0x4f8: 3c00000000000000     | 	.quad 60
0x500: 3d00000000000000     | 	.quad 61
0x508: 3e00000000000000     | 	.quad 62
0x510: 3f00000000000000     | 	.quad 63
0x518: fadebc0000000000     |   .quad 0xbcdefa # This shouldn't get moved
                            | 
0x520:                      |   .align 16
0x520:                      | Predest:
0x520: fadebc0000000000     |   .quad 0xbcdefa
0x528:                      | dest:
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720:                      | Postdest:
0x720: bcfade0000000000     |   .quad 0xdefabc
                            | 
0x728:                      | .align 8
                            | # Run time stack
0x728: 0000000000000000     |   .quad 0
0x730: 0000000000000000     |   .quad 0
0x738: 0000000000000000     |   .quad 0
0x740: 0000000000000000     |   .quad 0
0x748: 0000000000000000     |   .quad 0
0x750: 0000000000000000     |   .quad 0
0x758: 0000000000000000     |   .quad 0
0x760: 0000000000000000     |   .quad 0
0x768: 0000000000000000     |   .quad 0
0x770: 0000000000000000     |   .quad 0
0x778: 0000000000000000     |   .quad 0
0x780: 0000000000000000     |   .quad 0
0x788: 0000000000000000     |   .quad 0
0x790: 0000000000000000     |   .quad 0
0x798: 0000000000000000     |   .quad 0
0x7a0: 0000000000000000     |   .quad 0
                            | 
0x7a8:                      | Stack:
